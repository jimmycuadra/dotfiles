" Compatibility mode
set nocompatible

" BEGIN VUNDLE
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'
Bundle 'kien/ctrlp.vim'
Bundle 'tpope/vim-fugitive'
Bundle 'skalnik/vim-vroom'
Bundle 'jgdavey/vim-railscasts'
Bundle 'kchmck/vim-coffee-script'
Bundle 'elzr/vim-json'
Bundle 'tpope/vim-surround'
Bundle 'jnwhiteh/vim-golang'
Bundle 'tpope/vim-markdown'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'wting/rust.vim'
Bundle 'michaeljsmith/vim-indent-object'
Bundle 'tpope/vim-commentary'
filetype plugin indent on
" END VUNDLE

" Colors
colorscheme railscasts

" Syntax highlighting
syntax on

" Leader
let mapleader=","

" Tab stops
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
autocmd FileType python set tabstop=4 softtabstop=4 shiftwidth=4

" Line numbers
set number
set ruler
set colorcolumn=101
set cursorline
hi LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE
hi ColorColumn term=bold cterm=NONE ctermfg=NONE ctermbg=234 gui=NONE guifg=NONE guibg=234

" Wrap on word boundaries
set linebreak

" Info display
set showcmd
set showmode

" Status line
set laststatus=2
set statusline=%-10.3n\
set statusline+=%f\
set statusline+=%h%m%r%w
set statusline+=\[%{strlen(&ft)?&ft:'none'}]
set statusline+=%=
set statusline+=%-14(%l,%c%V%)
set statusline+=%<%P

" Buffers
set hidden

" Command line completion
set wildmenu
set wildmode=longest:list

" Searching
set ignorecase
set smartcase
set incsearch
set hlsearch
:nnoremap <cr> :nohlsearch<cr>

" Visual bell
set visualbell

set directory=$HOME/.vim/swap//

" System clipboard
set clipboard=unnamed

" Vroom
let g:vroom_use_bundle_exec = 0
let g:vroom_use_binstubs = 1
let g:vroom_binstubs_path = '.bundle/bin'

" Strip trailing whitespace on save
function! <SID>StripTrailingWhitespace()
  let _s=@/
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  let @/=_s
  call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespace()

" Insert literal tab or command complete
function TabOrComplete()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=TabOrComplete()<cr>
inoremap <s-tab> <c-n>

" Mappings
nnoremap <leader><leader> <c-^>
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l
